export function createDOM(postings, user, time1, text) {     let child = document.createElement("li")     let time = document.createElement("div")     time.setAttribute("class", "time")     time.textContent = time1      let user1 = document.createElement("div")     user1.setAttribute("class", "username")     user1.innerHTML = "<b>" + user + ":</b>"      let text1 = document.createElement("div")      // parse text     const urlRegex = /(https?:\/\/[^\s]+)/g;     let htmlText = text.replace(urlRegex, url => `<a href="${url}">${url}</a>`);     // extract url from text      /*if (text.substring(0, 4) == "img:") {         const imgurl = text.substring(4)         text1.innerHTML = `<img src="${imgurl}" width="100px" height="100px">`     } else {*/     //text = text.replace(/img:(https?:\/\/[^\s]+)/g, '<img src="$1" width="100px" height="100px" />');      //let url = text.match(/img:(https?:\/\/[^\s]+\.(?:jpg|jpeg|png|gif|bmp|webp))/gi);     let url = text.match(/img:(https?:\/\/[^\s]+(\s|(?=\n?$(?!\n))))/gi);     if (isValidUrl(url)) console.log("URL is valid")     else console.error("URL is invalid", url)      // images     // Replace image URLs with <img> tags \s|\r|\n|     text = text.replace(/img:(https?:\/\/[^\s]+(\s|(?=\n?$(?!\n))))/gi, '<img src="$1" width="100px" height="100px" />'); // terminated by space or end of string     //text = text.replace(/img:(https?:\/\/[^\s]+\.(?:jpg|jpeg|png|gif|bmp|webp))/gi, '<img src="$1" width="100px" height="100px" />'); // not every image is terminated by .jpg     text = text.replace(/img:(data:image\/jpeg;base64,[^\s]+)/g, '<img src="$1" width="100px" height="100px" />');     text = text.replace(/img:(data:image\/png;base64,[^\s]+)/g, '<img src="$1" width="100px" height="100px" />');      // links     //text = text.replace(/link:(https?:\/\/[^\s]+)/g, '<a href="$1">$1</a>');     //text = text.replace(/link:(https?:\/\/[www]?.[a-z]*.[a-z]*[^\s&^.]+(\s|[.]))/g, '<a href="$1">$1</a>');     //text = text.replace(/link:(https?:\/\/www.google.com\/[^\s&^.&\?&\!&\:&\,&\;]*)/g, '<a href="$1">$1</a>');     //                    https: //           tourismus.regensburg.de/     //                                        [a-z]*.   [a-z]*.    [a-z]*\/     //                                               [a-z.]*     //text = text.replace(/(https?:\/\/(www)?.?[a-z.]*.[a-z]*\/[^\s&^.&\!&\:&\,&\;]*)/g, '<a href="$1">$1</a>');      //                             www.           webseite .com         /        terminierung     // exclude  /(^:?https?:\/\/  (www)?.?         [a-z.]*.[a-z]*  \/?       [^.|^\s|^,|^:|^;]*)/g     //text = text.replace(/((?!img:)https?:\/\/(www)?.?[a-z.]*.[a-z]*\/?[^\s|^,|^:|^;]*)/g, '<a href="$1">$1</a>');     //text = text.replace(/(https?:\/\/[a-z.]*^img:$[^\s]*)/g, '<a href="$1">$1</a>');     // *************************************************************************     //text = text.replace(/(^(?!img:).*$)/g, '<a href="$1">$1</a>'); //     // ******************************************************************************     // https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRkORRTylPVKwhNZQ5Lq0s0K2ndzAY4L6pr7A&s     //text = text.replace(/(\s(?!img:)(https?:\/\/(www)?\.?[a-z.-]*\.[a-z]*\/?[^\s|^,|^;]*))/g, '<a href="$1">$1</a>'); //          //text = text.replace(/^(https?:\/\/[^\s]+)/g, '<a href="$1">$1</a>');     text = text.replace(/link:(https?:\/\/[^\s]+)/g, '<a href="$1">$1</a>'); // quite good solution     text = text.replace(/(\s(?!img:)https?:\/\/[^\s]+)/g, '<a href="$1">$1</a>'); // quite good solution          //text = text.replace(/<\/a>\s[.]/g, '</a>.');     //text = text.replace(/<\/a>\s[\?]/g, '</a>?'); */      text1.innerHTML = text     // Split text into parts: text and URLs     /*   const urlRegex1 = /(https?:\/\/[^\s]+)/g;        let lastIndex = 0;        let match;        while ((match = urlRegex1.exec(text)) !== null) {            console.log("match: " + match[0])            // Add text before URL            let textNode = document.createTextNode(text.substring(lastIndex, match.index))            if (match.index > lastIndex) {                text1.appendChild(textNode);            }            // Add anchor for URL            const anchor = document.createElement("a");            if (/[.!?:,)"]$/.test(match[0])) {                let text = match[0]                let trimmed = text.substring(0, match[0].length - 1);                anchor.href = trimmed;                anchor.textContent = trimmed;                text1.appendChild(anchor);                text1.appendChild(document.createTextNode(text.charAt(text.length - 1)));            } else {                anchor.href = match[0]                anchor.textContent = match[0];                text1.appendChild(anchor);            }             lastIndex = urlRegex.lastIndex;        }        // Add remaining text after last URL        if (lastIndex < text.length) {            let textNode = document.createTextNode(text.substring(lastIndex))            text1.appendChild(textNode);        }*/     //}     child.appendChild(time)     child.appendChild(user1)     child.appendChild(text1)     postings.appendChild(child) }  function isValidUrl(string) {     try {         new URL(string);         return true;     } catch (err) {         return false;     } }